package com.example.gitview

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.gitview.databinding.FragmentDetailInfoBinding
import kotlinx.coroutines.launch
import android.util.Base64



class DetailInfoFragment : Fragment(R.layout.fragment_detail_info) {

    private var _binding: FragmentDetailInfoBinding? = null
    private val binding get() = _binding!!

    private lateinit var repositoriesAdapter: RepositoriesAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentDetailInfoBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val repoName = arguments?.getString("repoName")
        val repoUrl = arguments?.getString("repoUrl")
        val repoStars = arguments?.getInt("repoStars") ?: 0
        val repoForks = arguments?.getInt("repoForks") ?: 0
        val repoWatchers = arguments?.getInt("repoWatchers") ?: 0
        val repoOwner = arguments?.getString("repoOwner")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ Toolbar
        (activity as? AppCompatActivity)?.supportActionBar?.title = repoName ?: "Repository"

        binding.repoUrl.text = repoUrl ?: "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
        binding.starsCount.text = "‚≠ê $repoStars"
        binding.forksCount.text = "üç¥ $repoForks"
        binding.watchersCount.text = "üëÄ $repoWatchers"

        // –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        binding.repoUrl.setOnClickListener {
            repoUrl?.let {
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(it))
                startActivity(intent)
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º README.md
        val token = "token $repoOwner"  // –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        val owner = repoOwner ?: "default_owner" // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        val repo = repoName ?: "default_repo"   // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

        lifecycleScope.launch {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README.md
                val response = RetrofitClient.instance.getReadme(token, owner, repo)

                if (response != null && response.content != null) {
                    val content = response.content

                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ Base64
                    val decodedContent = String(Base64.decode(content, Base64.DEFAULT))

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º README.md
                    val repository = Repository(
                        name = repoName ?: "Unknown",
                        html_url = repoUrl ?: "",
                        description = "Description here",  // –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                        language = "Kotlin",               // –ù–∞–ø—Ä–∏–º–µ—Ä, —è–∑—ã–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                        stargazers_count = repoStars,
                        forks_count = repoForks,
                        watchers_count = repoWatchers,
                        readmeContent = decodedContent // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README.md
                    )

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –Ω–æ–≤—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
                    repositoriesAdapter.submitList(listOf(repository))

                } else {
                    Toast.makeText(context, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å README", Toast.LENGTH_SHORT).show()
                }

            } catch (e: Exception) {
                e.printStackTrace()
                Toast.makeText(context, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ README", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
